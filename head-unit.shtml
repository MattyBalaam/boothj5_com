<!DOCTYPE html>
<html>
<head>
<title>Boothj5: Head-Unit</title>
<meta http-equiv="content-type" content="text/html; charset=latin1">
<style type="text/css">
<!--
.tabcode { margin-left: 40px; border-style: solid; border-width: 1px; padding: 10px;}
.tab { margin-left: 40px;}
-->
td.linenos { background-color: #f0f0f0; padding-right: 10px; }
span.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }
pre { line-height: 125%; }
body .hll { background-color: #ffffcc }
body  { background: #fffbfb; }
body .c { color: #408080; font-style: italic } /* Comment */
body .err { border: 1px solid #FF0000 } /* Error */
body .k { color: #008000; font-weight: bold } /* Keyword */
body .o { color: #666666 } /* Operator */
body .cm { color: #408080; font-style: italic } /* Comment.Multiline */
body .cp { color: #BC7A00 } /* Comment.Preproc */
body .c1 { color: #408080; font-style: italic } /* Comment.Single */
body .cs { color: #408080; font-style: italic } /* Comment.Special */
body .gd { color: #A00000 } /* Generic.Deleted */
body .ge { font-style: italic } /* Generic.Emph */
body .gr { color: #FF0000 } /* Generic.Error */
body .gh { color: #000080; font-weight: bold } /* Generic.Heading */
body .gi { color: #00A000 } /* Generic.Inserted */
body .go { color: #808080 } /* Generic.Output */
body .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
body .gs { font-weight: bold } /* Generic.Strong */
body .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
body .gt { color: #0040D0 } /* Generic.Traceback */
body .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
body .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
body .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
body .kp { color: #008000 } /* Keyword.Pseudo */
body .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
body .kt { color: #B00040 } /* Keyword.Type */
body .m { color: #666666 } /* Literal.Number */
body .s { color: #BA2121 } /* Literal.String */
body .na { color: #7D9029 } /* Name.Attribute */
body .nb { color: #008000 } /* Name.Builtin */
body .nc { color: #0000FF; font-weight: bold } /* Name.Class */
body .no { color: #880000 } /* Name.Constant */
body .nd { color: #AA22FF } /* Name.Decorator */
body .ni { color: #999999; font-weight: bold } /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
body .nf { color: #0000FF } /* Name.Function */
body .nl { color: #A0A000 } /* Name.Label */
body .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
body .nt { color: #008000; font-weight: bold } /* Name.Tag */
body .nv { color: #19177C } /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
body .w { color: #bbbbbb } /* Text.Whitespace */
body .mf { color: #666666 } /* Literal.Number.Float */
body .mh { color: #666666 } /* Literal.Number.Hex */
body .mi { color: #666666 } /* Literal.Number.Integer */
body .mo { color: #666666 } /* Literal.Number.Oct */
body .sb { color: #BA2121 } /* Literal.String.Backtick */
body .sc { color: #BA2121 } /* Literal.String.Char */
body .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #BA2121 } /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
body .sh { color: #BA2121 } /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
body .sx { color: #008000 } /* Literal.String.Other */
body .sr { color: #BB6688 } /* Literal.String.Regex */
body .s1 { color: #BA2121 } /* Literal.String.Single */
body .ss { color: #19177C } /* Literal.String.Symbol */
body .bp { color: #008000 } /* Name.Builtin.Pseudo */
body .vc { color: #19177C } /* Name.Variable.Class */
body .vg { color: #19177C } /* Name.Variable.Global */
body .vi { color: #19177C } /* Name.Variable.Instance */
body .il { color: #666666 } /* Literal.Number.Integer.Long */
</style>
<link href="css/boothj5_main.css" type="text/css" rel="stylesheet"/>
<link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700' rel='stylesheet' type='text/css'>


</head>
<body bgcolor="FFFBFB">
<!--#include file="headerfooter.html" -->
<div id="Content"/>
<h2><b>Head-Unit</h2> </b>

<p>
Head-Unit is a small unit testing framework for C and C++, written in C.

<h4>Using head-unit</h4>
Basic steps are:

<ol>
<li>Write the tests</li>
<li>Register the tests in a test module</li>
<li>Register the test modules in a testsuite</li>
<li>Run the testsuite</li>
</ol>

<h4>C asserts</h4>
<div class="tabcode">
<div class="highlight"><pre><span class="n">assert_true</span><span class="p">(</span><span class="kt">int</span> <span class="n">expression</span><span class="p">);</span>
<span class="n">assert_false</span><span class="p">(</span><span class="kt">int</span> <span class="n">expression</span><span class="p">);</span>
<span class="n">assert_int_equals</span><span class="p">(</span><span class="kt">int</span> <span class="n">expected</span><span class="p">,</span> <span class="kt">int</span> <span class="n">actual</span><span class="p">);</span>
<span class="n">assert_string_equals</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">expected</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">actual</span><span class="p">);</span>
</pre></div>
</div>

<h4>C++ asserts</h4>
<div class="tabcode">
<div class="highlight"><pre><span class="n">assert_equals</span><span class="p">(</span><span class="n">T</span> <span class="n">expected</span><span class="p">,</span> <span class="n">T</span> <span class="n">actual</span><span class="p">);</span>
</pre></div>
</div>

<br>Where T must implement the following:<br><br>

<div class="tabcode">
<div class="highlight"><pre><span class="kt">bool</span> <span class="n">T</span><span class="o">::</span><span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">T</span><span class="o">::</span><span class="k">operator</span><span class="o">!=</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
<span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">strm</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">);</span>
</pre></div>
</div>

<h4>Write a test module</h4>
some-tests.c:
<br><br>

<div class="tabcode">
<div class="highlight"><pre><span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;head-unit.h&gt;</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">setup</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ... do some setup for all tests ...</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">teardown</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ... close resources etc ...</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">beforetest</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ... code to run before each test ...</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">aftertest</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ... code to run after each test ...</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">test_something</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ... some code ...</span>

    <span class="n">assert_true</span><span class="p">(</span><span class="n">somthing</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">test_something_else</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ... some code ...</span>

    <span class="n">assert_true</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">something_else</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">register_some_tests</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">TEST_MODULE</span><span class="p">(</span><span class="s">&quot;some_tests&quot;</span><span class="p">);</span>
    <span class="n">SETUP</span><span class="p">(</span><span class="n">setup</span><span class="p">);</span>
    <span class="n">BEFORETEST</span><span class="p">(</span><span class="n">beforetest</span><span class="p">);</span>
    <span class="n">AFTERTEST</span><span class="p">(</span><span class="n">aftertest</span><span class="p">);</span>
    <span class="n">TEST</span><span class="p">(</span><span class="n">test_something</span><span class="p">);</span>
    <span class="n">TEST</span><span class="p">(</span><span class="n">test_something_else</span><span class="p">);</span>
    <span class="n">TEARDOWN</span><span class="p">(</span><span class="n">teardown</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<br>
The use of static is optional but stops tests with similar names in different source files conflicting.
<p>
The register function must not be static.
<p>
The SETUP, BEFORETEST, AFTERTEST and TEARDOWN functions and equivalent macros are optional.

<h4>Create the testsuite header and source file</h4>
testsuite.h:
<br><br>
<div class="tabcode">
<div class="highlight"><pre><span class="cp">#ifndef TESTSUITE_H</span>
<span class="cp">#define TESTSUITE_H</span>

<span class="kt">void</span> <span class="nf">register_some_tests</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">;</span>
<span class="kt">void</span> <span class="nf">register_some_other_tests</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">;</span>

<span class="cp">#endif</span>
</pre></div>
</div>
<br>
testsuite.c:
<br><br>
<div class="tabcode">
<div class="highlight"><pre><span class="cp">#include &lt;head-unit.h&gt;</span>
<span class="cp">#include &lt;&quot;testsuite.h&quot;&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">register_some_tests</span><span class="p">()</span> <span class="p">;</span>
    <span class="n">register_some_other_tests</span><span class="p">()</span> <span class="p">;</span>
    <span class="n">run_suite</span><span class="p">()</span> <span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span> <span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<br>

<h4>Build and run the tests</h4>

C compiler flags:

<pre class="tab">
-lstdc++ -I ~/include -L ~/lib -l headunit
</pre>

C++ compiler flags:

<pre class="tab">
-Wno-write-strings -I ~/include -L ~/lib -l headunit
</pre>

Example C make targets:

<pre class="tab">
compile-tests: testsuite.o some_tests.o something.o
    $(CC) -lstdc++ testsuite.o some_tests.o something.o -I ~/include -L ~/lib -o testsuite -l headunit

test: compile-tests
    ./testsuite
</pre>


Example C++ make targets:

<pre class="tab">
compile-tests: testsuite.o some_tests.o something.o
    $(CC) -Wno-write-strings testsuite.o some_tests.o something.o -I ~/include -L ~/lib -o testsuite -l headunit

test: compile-tests
    ./testsuite
</pre>


<h4>Source</h4>
The source can be found on <a href="http://github.com/boothj5/head-unit">Github</a>


<hr>
</div>
</body>

</html>

